...................................../Версия 1/.....................................
<unistd.h> - Содержит определения системных символьных констант, а
также прототипы большинства системных вызовов (подключаем для execlp)

pid_t является примитивным типом данных, который определяет идентификатор процесса или группы процессов.

ПРО FORK:
fork возвращает родительскому процессу уникальный идентификатор созданного дочернего процесса.
Процесс-потомок получает в качестве кода возврата значение 0, если вызов fork() оказался успешным.
Если fork возвращает -1, то это свидетельствует об ошибке (естественно, в этом случае возврат происходит только в 
процесс, выполнивший системный вызов).
Дополнительно ядро назначает процессу идентификатор группы процессов (process group ID). 

(Группа процессов включает один или более процессов и
существует, пока в системе присутствует хотя бы один процесс этой группы. Временной интервал, начинающийся 
с создания группы и заканчивающийся, когда последний процесс ее покинет, называется временем
жизни группы. Последний процесс может либо завершить свое выполнение, либо перейти в другую группу)

Новый процесс является точной копией породившего его процесса. Как это ни удивительно, но новый процесс имеет те же 
инструкции и данные, что и его родитель. Более того, выполнение родительского и
дочернего процесса начнется с одной и той же инструкции, следующей за fork(2). Каждый процесс имеет одного родителя, но может
иметь несколько дочерних процессов.

Чем дочерний процесс отличается от родительского?
- дочернему процессу присваивается уникальный идентификатор
- идентификаторы родительского процесса PPID у этих процессов различны
- дочерний процесс свободен от сигналов, ожидающих доставки
- значение, возвращаемое системным вызовом fork(2) различно для родителя и потомка
- (?) израсходованного времени ЦП (оно обнуляется) 









...................................../Версия 2/.....................................
