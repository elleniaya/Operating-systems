ФАЙЛ В UNIX:
- Все данные пользователей хранятся в виде файлов
- Файлы определяют привилегии пользователей, поскольку права пользователя в большинстве случаев контролируются с помощью прав доступа к файлам.
- Файлы обеспечивают доступ к периферийным устройствам компьютера, включая диски, накопители на магнитной ленте, CD!ROM, принтеры, терминалы, сетевые 
адаптеры и даже память.
- Наконец, все программы, которые выполняются в системе, включая прикладные задачи пользователей, системные процессы и даже ядро UNIX, являются исполняемыми файлами.

(!) Для приложений UNIX доступ в дисковому файлу "неотличим" от доступа, скажем, к принтеру.

ФАЙЛОВАЯ СИСТЕМА:
Файлы организованы в виде древовидной структуры (дерева), называемой файловой системой.
Каждый файл имеет имя, определяющее его расположение в дереве файловой системы.
Корнем этого дерева является корневой каталог (root directory), имеющий имя "/".
Имена всех остальных файлов содержат путь — список каталогов (ветвей), которые необходимо пройти, чтобы достичь файла.

В UNIX все доступное пользователям файловое пространство объединено в единое дерево каталогов, корнем которого является каталог Таким образом, полное имя 
любого файла начинается с и не содержит идентификатора устройства (дискового накопителя, CD!ROM или удаленного компьютера в сети), на котором он фактически хранится.

В большинстве случаев единое дерево, такое каким его видит пользователь системы, составлено из нескольких отдельных файловых систем, которые могут иметь различную внутреннюю структуру, а файлы, принадлежащие этим файловым системам, могут быть расположены на различных устройствах.

СТРУКТУРА ФАЙЛА:
Имя файла является атрибутом файловой системы

Каждый файл имеет связанные с ним метаданные (хранящиеся в индексных дескрипторах — inode), содержащие все характеристики файла и позволяющие операционной системе выполнять операции, заказанные прикладной задачей: открыть файл, прочитать или записать данные, создать или удалить файл. 

В частности, метаданные содержат указатели на дисковые блоки хранения данных файла. Имя файла в файловой системе является указателем на его метаданные, в то время как метаданные НЕ содержат указателя на имя файла.


ВЛАДЕЛЬЦЫ ФАЙЛОВ:
Файлы в UNIX имеют двух владельцев: пользователя (user owner) и группу (group owner).

-> Группой называется определенный список пользователей системы. Пользователь системы может быть членом нескольких групп, одна из которых является первичной (primary), 
остальные — дополнительными (supplementary).

Важной особенностью является то, что владелец пользователь может не являться членом группы, владеющей файлом. Это дает большую гибкость в организации доступа к файлам.

Владельцем-пользователем вновь созданного файла является пользователь, который создал файл. Порядок назначения владельца!группы зависит от
конкретной версии UNIX. Например, в SCO UNIX владельцем-группой является первичная группа пользователя, создавшего файл, а в Digital UNIX владелец-группа 
наследуется от владельца группы—каталога, в котором создается файл.

На самом деле файл создает не пользователь, а процесс, запущенный пользователем. Процесс имеет атрибуты, связанные с пользователем и группой, которые и назначаются файлу при его создании. Более точное описание передачи "владения" имеет вид:

1. Идентификатор владельца-пользователя файла (UID) устанавливается равным EUID процесса, создающего файл (т. е. вызвавшего функцию open(2) или creat(2)).
1. Идентификатор владельца-группы файла (group ID) устанавливается равным
а) EGID процесса (для версии System V);
б) GID каталога, в котором файл создается (для версии BSD).
Большинство систем, использующих наследование System V, позволяют также устанавливать наследование группового владельца в стиле BSD. Это достигается установкой флага
SGID на каталог. 

Владение файлом определяет тот набор операций, который пользователь может совершить с файлом.
Часть из них, такие как изменение прав доступа или владельца файла (табл. 1.1), может осуществлять только владелец (или суперпользователь), другие операции, такие как чтение, запись и запуск на выполнение (для исполняемых файлов) дополнительно контролируются правами доступа.

ИЗМЕНЕНИЕ ВЛАДЕЛЬЦЕВ ФАЙЛА ИЛИ ГРУППЫ:
Для изменения владельца файла используется команда chown.

(!)  Например, следующая команда установит пользователя sergey владельцем файлов client.c server.c
$ sergey client.c server.c

Изменение владельца-группы производится командой chgrp.
Например, для установки группы staff в качестве владельца всех файлов текущего каталога, необходимо задать следующую команду:
$ chgrp staff *

ПРАВА ДОСТУПА К ФАЙЛУ:
В операционной системе UNIX существуют три базовых класса доступа к
файлу, в каждом из которых установлены соответствующие права доступа:
User access (u) Для владельца-пользователя файла
Group access (g) Для членов группы, являющейся владельцем файла
Other access (о) Для остальных пользователей (кроме суперпользователя)

UNIX поддерживает три типа прав доступа для каждого класса: на чтение
(read, обозначается символом на запись (write, обозначается символом w)
и на выполнение (execute, обозначается символом х).

ПРАВА ДОСТУПА ДЛЯ КАТАЛОГОВ:
1) чтение - позволяет получать ТОЛЬКО имена файлов, находящихся в данном каталоге.

2) выполнение - получение доп. информации о файлах каталога (например, командой ls -l), переход в каталог (cd). Это же право нужно иметь для доступа 
ко всем каталогам на пути к указанному.
(!) Например, если вы установите право на выполнения для всех пользователей в одном из своих подкаталогов, он все равно останется недоступным, пока ваш домашний каталог не будет иметь такого же права.
(!) Права и х действуют независимо, право х для каталога не требует наличия права и наоборот.

3) запись - создание и удаление файлов в каталоге. 
Самое важное, что при этом не учитываются права доступа для самого файла. То есть для того, чтобы удалить некоторый файл из каталога, не обязательно иметь 
какие-либо права доступа к этому файлу, важно лишь иметь право на запись для каталога, в котором находится этот файл.

Операционная система производит проверку прав доступа при создании, открытии (для чтения или записи), запуске на выполнение или удалении файла. 
В следующей последовательности: суперпользователь (проверок нет, сразу доступ разрешается) -> владелец файла (если требуемое право доступа определено, доступ
разрешается) -> пользователь, являющийся членом группы, которая является владельцем файла (аналогично владельцу файла) -> прочие пользователи (аналогично).

ДОПОЛНИТЕЛЬНЫЕ АТРИБУТЫ ФАЙЛА:
Установка атрибута Sticky bit для каталога позволяет установить дополнительную защиту файлов, находящихся в каталоге. Из такого каталога пользователь может удалить только файлы, которыми он владеет, или на которые он имеет явное право доступа на запись, даже при наличии права на запись в каталог. (пример - каталог /tmp)
