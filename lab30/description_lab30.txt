Сокеты создаются в рамках определенного коммуникационного домена, подобно тому как файлы создаются в рамках
файловой системы. Сокеты имеют соответствующий интерфейс доступа в файловой системе UNIX, и так же как обычные файлы, адресуются некоторым целым числом — дескриптором.
Однако в отличие от обычных файлов, сокеты представляют собой виртуальный объект, который существует, пока на него ссылается хотя бы один из процессов.

Приложение должно иметь возможность затребовать определенный тип связи, например, основанный на виртуальном канале (virtual circuit) или датаграммах (datagram), 
причем эти типы должны быть согласованы для всех коммуникационных доменов. Все сокеты условно можно разделить на несколько типов, в зависимости от предоставляемых 
коммуникационных характеристик. Полный набор этих характеристик включает:
1. Упорядоченную доставку данных
2. Отсутствие дублирования данных
3. Надежную доставку данных
4. Сохранение границ сообщений
5. Поддержку передачи экстренных сообщений
6. Предварительное установление соединения

В BSD UNIX реализованы следующие основные типы сокетов:
-> Сокет датаграмм - через который осуществляется теоретически ненадежная, несвязная передача пакетов.
-> Сокет потока - через который осуществляется надежная передача потока байтов без сохранения границ сообщений. Этот тип сокетов поддерживает передачу экстренных данных.
-> Сокет пакетов - через который осуществляется надежная последовательная передача данных без дублирования с предварительным установлением связи. При этом сохраняются
границы сообщений.
-> Сокет низкого уровня - через который осуществляется непосредственный доступ к коммуникационному протоколу.

Наконец, для того чтобы независимые процессы имели возможность взаимодействовать друг с другом, для сокетов должно быть определено пространство имен. Имя сокета 
имеет смысл только в рамках коммуникационного домена, в котором он создан.

Для создания сокета процесс должен указать тип сокета и коммуникационный домен, в рамках которого будет использоваться сокет.

Поскольку коммуникационный домен может поддерживать использование нескольких протоколов, процесс может также указать конкретный коммуникационный
протокол для взаимодействия. Если таковой не указан, система выберет наиболее подходящий из списка протоколов, доступных для данного коммуникационного домена. 
Если же в рамках указанного домена создание сокета данного типа невозможно, т. е. отсутствует соответствующий коммуникационный протокол, запрос процесса завершится
неудачно.

SERVER:

Для внутреннего домена UNIX адрес выглядит следующим образом (определен в #include <sys/un.h>)
struct sockaddr_un {
    short sun_family /* == AF_UNIX */
    char sun_path[108]
}

Поле sa_family определяет коммуникационный домен (семейство протоколов), а sun_path содержит собственно адрес, формат которого определен для каждого домена.
Поскольку в данном домене взаимодействующие процессы выполняются под управлением одной операционной системы на одном и том же хосте,
коммуникационный узел может быть однозначно определен одним параметром — локальным процессом. В качестве адреса в домене UNIX используются имена файлов.

Итак, связывание необходимо для присвоения сокету локального адреса и,
таким образом, для определения коммуникационного узла. Можно выделить три случая использования для этого функции bind:
1. Сервер регистрирует свой адрес. Этот адрес должен быть заранее известен клиентам, желающим "общаться" с сервером. Связывание необходимо, прежде чем сервер 
будет готов к приему запросов от клиентов.
2. При взаимодействии без предварительного установления связи и создания виртуального канала клиент также должен предварительно зарегистрировать свой адрес. 
Этот адрес должен быть уникальным в рамках коммуникационного домена. В случае домена UNIX об этом должно позаботиться само приложение. Этот адрес не должен быть 
заранее известен серверу, поскольку запрос всегда инициирует клиент, автоматически передавая вместе с ним свой адрес. Полученный адрес
удаленного узла затем используется сервером для мультиплексирования сообщений, отправляемым различным клиентам.
3. Даже в случае взаимодействия с использованием виртуального канала клиент может пожелать зарегистрировать собственный адрес, не полагаясь при этом на систему.

СИСТЕМНЫЙ ВЫЗОВ CONNECT:
int connect (int sockfd, struct sockaddr *servaddr, int addrlen);
Назначение адреса для клиента также можно выполнить с помощью системного вызова connect() устанавливающего связь с сервером и автоматически связывающего сокет 
клиента с локальным коммуникационным узлом.  В этом случае клиенту нет необходимости явно связывать сокет с помощью системного вызова bind().


-> СИСТЕМНЫЙ ВЫЗОВ SOCKET:
int socket (int domain, int type, int protocol);
Здесь аргумент domain определяет коммуникационный домен, type — тип
сокета, a protocol — используемый протокол (может быть не указан, т. е.
приравнен 0).
УСПЕХ:  положительное целое число, аналогичное файловому дескриптору, которое служит для адресации данного сокета в последующих вызовах.
Возможные значения аргумента domain включают:
-> AF_UNIX - Домен локального межпроцессного взаимодействия в пределах единой операционной системы UNIX. Внутренние протоколы.
-> AF_INET - Домен взаимодействия процессов удаленных систем. Протоколы Internet (TCP/IP).
-> AF_NS - Домен взаимодействия процессов удаленных систем. Протоколы Xerox NS.
AF - от address family — семейство адресов (Поскольку домен и семейство протоколов определяют адресное пространство взаимодействия).

-> СИСТЕМНЫЙ ВЫЗОВ 

