------------------/Где хранятся переменные среды/--------------------
Программы на языке C состоят из следующих частей:
- Сегмент кода, машинные инструкции, выполняемые центральным процессором.
- Сегмент инициализированных данных, содержит переменные, которые инициализированы определенными значениями в тексте программы. 
- Сегмент неинициализированных данных, также называемый “BSS”. Данные в этом сегменте инициализируются нулем или нулевыми указателями перед запуском программы.
- Сегмент стека.
- Куча.

Каким образом запускаются программы?
На самом деле каждый раз порождается новый процесс, а затем загружается программа.
В UNIX эти два этапа четко разделены. Соответственно система предоставляет два различных системных вызова: один для создания процесса, а другой для запуска новой программы.

(новый процесс порождается с помощью системного вызова fork(2)) 
После возвращения из системного вызова fork оба процесса выполняют инструкции одной и той же программы и имеют одинаковые сегменты данных и стека.

Порожденный процесс является точной копией процесса, выполнившего этот вызов. В частности, дочерний процесс наследует такие атрибуты родителя, как:
- идентификаторы пользователя и группы,
- переменные окружения,
- диспозицию сигналов и их обработчики,
- ограничения, накладываемые на процесс,
- текущий и корневой каталог,
- маску создания файлов,
- все файловые дескрипторы, включая файловые указатели,
- управляющий терминал.

Среди атрибутов процесса есть те, которые хранятся в пользовательской области и те, которые хранятся в пользовательском стеке.

---------------------------//----------------------------------------

С точки зрения пользователя в операционной системе UNIX существуют два типа объектов: файлы и процессы.

ФАЙЛОВАЯ СИСТЕМА:

Все данные хранятся в виде файлов, доступ к периферийным устройствам осуществляется посредством чтения/записи в специальные файлы. 
Когда вы запускаете программу, ядро загружает соответствующий исполняемый файл, создает образ процесса и передает ему управление. 
Более того, во время выполнения процесс может считывать или записывать данные в файл. С другой стороны, вся функциональность операционной 
системы определяется выполнением соответствующих процессов

Файлы в UNIX определяют привилегии пользователей, поскольку права пользователя в большинстве случаев контролируются с помощью прав доступа к файлам.
Все программы, которые выполняются в системе, включая прикладные задачи пользователей, системные процессы и даже ядро UNIX, являются исполняемыми файлами.

Файлы организованы в виде древовидной структуры (дерева), называемой файловой системой.

-------------------/тут потом добавлю про файлы/---------------------------

ПРОЦЕССЫ:

Обычно программой называют совокупность файлов, будь то набор исходных текстов, объектных файлов или собственно выполняемый файл. 

(!) Для того чтобы программа могла быть запущена на выполнение, операционная система сначала должна создать окружение или среду выполнения задачи,
куда относятся ресурсы памяти, возможность доступа к устройствам ввода/вывода и различным системным ресурсам, включая услуги ядра.

Это окружение (среда выполнения задачи) получило название процесса.
- Процесс состоит из инструкций, выполняемых процессором, данных и информации о выполняемой задаче, такой как размещенная память, открытые файлы и статус процесса.
- Процесс считывает и записывает информацию в раздел данных и в стек, но ему недоступны данные и стеки других процессов.
- Программа может породить более одного процесса.
- Процессы имеют возможность обмениваться друг с другом данными с помощью предоставляемой UNIX системой межпроцессного взаимодействия.

Типы процессов:

1. Системные процессы являются частью ядра и всегда расположены в оперативной памяти.
    - Не имеют соответствующих им программ в виде исполняемых файлов и запускаются особым образом при инициализации ядра системы.
    - Выполняемые инструкции и данные этих процессов находятся в ядре системы, таким образом они могут вызывать функции и обращаться к данным, недоступным для остальных процессов.
    Ими являются:  shed (диспетчер свопинга), vhand (диспетчер страничного замещения), bdfflush(диспетчер буферного кэша), kmadaemon (диспетчер памяти ядра), а
    также следует отнести init (не является частью ядра, и его запуск происходит из исполняемого файла (/etc/init), его работа жизненно важна для функционирования
    всей системы в целом.
2. Демоны -  это неинтерактивные процессы, которые запускаются обычным образом — путем загрузки в память соответствующих им программ (исполняемых файлов), и 
выполняются в фоновом режиме.
    - Обычно демоны запускаются при инициализации системы (но после инициализации ядра) и обеспечивают работу различных подсистем UNIX: системы терминального 
    доступа, системы печати, системы сетевого доступа и сетевых услуг и т. п. 
    - Не связаны ни с одним пользовательским сеансом работы и не могут непосредственно управляться пользователем. 
    - Большую часть времени демоны ожидают пока тот или иной процесс запросит определенную услугу, например, доступ к файловому архиву или печать документа.
3. Прикладные процессы - все остальные процессы, выполняющиеся в системе(как правило, это процессы, порожденные в рамках пользовательского сеанса работы).
    - Могут выполняться как в интерактивном, так и в фоновом режиме, но в любом случае время их жизни (и выполнения) ограничено сеансом работы пользователя.
    - При выходе из системы все пользовательские процессы будут уничтожены

Атрибуты процесса:

1. Идентификатор процесса Process ID.
     - Позволяет ядру системы различать процессы.
     - Когда создается новый процесс, ядро присваивает ему следующий свободный идентификатор. 
     - Присвоение идентификаторов происходит по возрастающий (т.е. идентификатор нового процесса больше, чем идентификатор процесса, созданного перед ним).
     - Если идентификатор достиг максимального значения, следующий процесс получит минимальный свободный PID и цикл повторяется.
     - Когда процесс завершает свою работу, ядро освобождает занятый им идентификатор.
2. Идентификатор родительского процесса Parent Process ID 
     - Идентификатор процесса, породившего данный процесс.
3. Приоритет процесса (Nice Number)
     - Относительный приоритет процесса, учитываемый планировщиком при определении очередности запуска.
4. Терминальная линия (TTY)
     - Терминал или псевдотерминал, ассоциированный с процессом, если такой существует. 
     - Процессы - демоны не имеют ассоциированного терминала.
5. Реальный (RID) и эффективный (EUID) идентификаторы пользователя
     - Реальным идентификатором пользователя данного процесса является идентификатор пользователя, запустившего процесс.
     - Эффективный идентификатор служит для определения прав доступа процесса к системным ресурсам (в первую очередь к ресурсам файловой системы). 
     - Обычно реальный и эффективный идентификаторы эквивалентны, т. е. процесс имеет в системе те же права, что и пользователь, запустивший его, ОДНАКО 
     существует возможность задать процессу более широкие права, чем права пользователя путем установки флага SUID, когда эффективному идентификатору 
     присваивается значение идентификатора владельца исполняемого файла (например, администратора).
6. Реальный (RGID) и эффективный (EGID) идентификаторы группы
...

Управление памятью процесса:

Можно сказать, что каждый процесс в операционной системе UNIX вы!
полняется на собственной виртуальной вычислительной машине, где все
ресурсы принадлежат исключительно данному процессу. Подсистема
управления памятью обеспечивает такую иллюзию в отношении физиче!
ской памяти.


(!) Важнейшим пользовательским процессом является основной командный интерпретатор (login shell), который обеспечивает вашу работу в UNIX. Он запускается сразу 
же после вашей регистрации в системе, а завершение работы login shell приводит к отключению от системы.


Операционная система UNIX является многозадачной. Это значит, что
одновременно может выполняться несколько процессов, причем часть
процессов могут являться образцами одной программы.

