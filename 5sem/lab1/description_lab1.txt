PTHREAD_CREATE
Дополнительные потоки создаются функцией pthread_create.
int pthread_create(pthread_t* tid , const pthread_attr_t *attr, void *(*func )(void*), void *arg);
Возвращает: 0 в случае успешного выполнения, положительное значение в случае ошибки.

1. Каждый поток процесса обладает собственным идентификатором потока (thread ID ), относящимся к типу 
данных pthread_t (как правило, это unsigned int). При успешном создании нового потока его идентификатор 
возвращается через указатель tid.

2. У каждого потока имеется несколько атрибутов: его приоритет, исходный размер стека, указание на то, 
должен ли этот поток являться демоном или нет, и т.д. При создании потока мы можем задать эти атрибуты,
инициализируя переменную типа pthread_attr_t, что позволяет заменить значение, заданное по умолчанию. Обычно 
мы используем значение по умолчанию, в этом случае мы задаем аргумент attr равным пустому указателю.

3. При создании потока мы должны указать, какую функцию будет выполнять этот
поток. Выполнение потока начинается с вызова заданной функции, а завершается либо явно
(вызовом pthread_exit), либо неявно (когда вызванная функция возвращает управление).
Адрес функции задается аргументом func, и она вызывается с единственным
аргументом-указателем arg. Если этой функции необходимо передать несколько аргументов,
следует поместить их в некоторую структуру и передать адрес этой структуры как
единственный аргумент функции.

Обратите внимание на объявления func и arg. Функции передается один аргумент —
универсальный указатель void*. Это позволяет нам передавать потоку с помощью
единственного указателя все, что требуется, и точно так же поток возвращает любые данные,
используя этот указатель.

Если функция pthread_create не может создать новый поток, так как мы превысили допустимый системный 
предел количества потоков, функция возвратит значение EAGAIN. Функции Pthreads не присваивают переменной errno
никаких значений. Соглашение о том, что 0 является индикатором успешного выполнения, а
ненулевое значение — индикатором ошибки, не приводит к противоречию, так как все
значения Exxx, определенные в заголовочном файле &lt;sys/errno.h&gt;, являются
положительными. Ни одному из имен ошибок Exxx не сопоставлено нулевое значение.

Поток содержит набор информации, необходимой для представления контекста выполнения внутри процесса. 
Сюда включаются идентификатор потока, отличающий поток внутри процесса, набор значений в регистрах процессора, 
стек, приоритет, маска сигналов, переменная errno и дополнительные данные, специфичные для потока. 
Все компоненты процесса, включая выполняемый код программы, глобальные переменные и динамическую память, 
стеки и файловые дескрипторы, могут совместно использоваться различными потоками этого процесса.

Что такое поток?
